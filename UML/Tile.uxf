<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>498</x>
      <y>1236</y>
      <w>132</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>*Tile*
--
-nType: sideType
-eType: sideType
-sType: sideType
-wType: sideType
-preyType: PreyType
-roadsConnect: bool
-citiesConnect: bool
--
Tile(n, s, e, w, center, hasPennant)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>558</x>
      <y>1170</y>
      <w>18</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>498</x>
      <y>1080</y>
      <w>126</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>*TileRelation*
--
-tile: *Tile
-landmarks: vector&lt;Landmark*&gt;
-nTile: *TileRelation
-eTile: *TileRelation
-sTile: *TileRelation
-wTile: *TileRelation
--
getters()
setters()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>498</x>
      <y>978</y>
      <w>126</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>*Board*
--
-tiles: TileRelation*[153][153]
-tigers: Player*[153][153][9]
-startTile: TileRelation*
--
Board() // Place 1st tile &amp; init board</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>558</x>
      <y>1038</y>
      <w>18</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>390</x>
      <y>1122</y>
      <w>186</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;290.0;190.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>558</x>
      <y>924</y>
      <w>18</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>846</x>
      <y>1200</y>
      <w>126</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>*TileLake*
{friend Lake}
--
nLake: TileLake*
eLake: TileLake*
sLake: TileLake*
wLake: TileLake*
bool sidesConnect
bool hasCrocodile</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>978</x>
      <y>1200</y>
      <w>126</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>*TileDen*
{friend Den}
--
vector&lt;Tile*&gt; surroundingTiles;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>714</x>
      <y>1200</y>
      <w>126</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>*TileTrail*
{friend Trail}
--
nextTrail: TileTrail*
prevTrail: TileTrail*
bool trailEnds
bool hasCrocodile</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>558</x>
      <y>1038</y>
      <w>360</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;580.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>846</x>
      <y>1068</y>
      <w>126</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Virtual&gt;&gt;
/TileLandmark/
{friend Landmark}
--
tigerOwnedBy: Player*
tigerCount: int
hasCrocodile: bool
--
setLandmarkType(LandmarkType)
getLandmarkType()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>774</x>
      <y>1170</y>
      <w>150</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>230.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>900</x>
      <y>1170</y>
      <w>24</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>20.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>906</x>
      <y>1170</y>
      <w>156</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;240.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>378</x>
      <y>924</y>
      <w>198</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
m1=2..n</panel_attributes>
    <additional_attributes>10.0;90.0;310.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>372</x>
      <y>864</y>
      <w>84</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>Board has a lot of
business logic, so
we might need a
BoardController.
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>978</y>
      <w>126</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Virtual&gt;&gt;
*Player*
--
-tigerCount: int
-crocodileCount: int
-score: int
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>474</x>
      <y>816</y>
      <w>180</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>*Game*
--
-board: Board*
-deck: TileDeck
-players: Player*[2]
-turnIndex: int
-landmarks: TileLandmark*[153][153][9]
--
Board* getBoard()
TileDeck* getDeck()
Player* getPlayer(int)
int getTurnIndex()
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>1068</y>
      <w>126</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>*TileDeck*
--
-Deck: vector(*Tile)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>390</x>
      <y>924</y>
      <w>186</w>
      <h>156</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>290.0;10.0;10.0;240.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>258</x>
      <y>1230</y>
      <w>198</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>*MoveEntity*
--
+forfeit: bool
+tile: Tile*
+numOfTileRelations: int
+x_coord: int
+y_coord: int
+crocodile: bool
+tigerZone: int //if = -1, then no tiger was placed
--
+MoveEntity() //Forfeit Constructor
+MoveEntity(Tile*, int, int, int, bool, int)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>474</x>
      <y>570</y>
      <w>180</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>*GameInteractor*
--
game: Game*
views: vector&lt;Interface*&gt;
--
void attachInterface(Interface*)
void notifyInterfaces() // Calls update() on all interfaces

// StartGame
shuffleDeck()
static createTileFromTemplate(char)
defineTiles()
setupTileDeck()
// init Players

// PlayTurn
isPlacementValid(int x, int y, Tile*)
placeTile(int x, int y, Tile*)
rotateTile(Tile*)
rotateTile(Tile*, int)
-placeLandmarks(int x, int y, Tile*)

setupBoard()

// Landmarks
isComplete(TileLandmark*)
Player* getOwner(TileLandmark*)
placeTiger(TileLandmark*)
placeTigerOnSkip(TileLandmark*)
placeCrocodile(TileLandmark*)
playTurn(int x, int y, bool tiger, bool croc, int zone)
static createTileLandmark(LandmarkType)
append(TileLandmark*, TileLandmark*)
// TileTrail
appendTrails(TileTrail*, TileTrail*)

// EndGame
scoreBoard(Board*)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>558</x>
      <y>774</y>
      <w>18</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>258</x>
      <y>240</y>
      <w>180</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>*SocketInterface*
--
-a: GameInteractor&amp;
-b: GameInteractor&amp;
--
-update()
authenticate()
receiveChallenge()
beginRound()
beginMatch()
receiveMove()
sendMove()
endMatch()
playTournament()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>342</x>
      <y>384</y>
      <w>228</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;360.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>552</x>
      <y>384</y>
      <w>18</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>468</x>
      <y>240</y>
      <w>180</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>*BotInterface*
--
-gi: GameInteractor&amp;
--
-update()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>60</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>SimpleClass</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>96</x>
      <y>258</y>
      <w>156</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>Responsible for communicating info
about the game to the server when
requested, and can play moves. 
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>474</x>
      <y>450</y>
      <w>180</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Virtual&gt;&gt;
*Interface*
--
Game* model;
GameInteractor* interactor;
--
Interface(GameInteractor&amp;) // calls GameInteractor.attachInterface()
virtual void update()
#getGame()
#getInteractor()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>558</x>
      <y>540</y>
      <w>18</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>678</x>
      <y>240</y>
      <w>180</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>*LogInterface*
--
-gi: GameInteractor&amp;
--
-update()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>552</x>
      <y>384</y>
      <w>240</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>380.0;10.0;10.0;110.0</additional_attributes>
  </element>
</diagram>
